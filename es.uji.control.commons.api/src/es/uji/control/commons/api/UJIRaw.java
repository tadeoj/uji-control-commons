package es.uji.control.commons.api;


public class UJIRaw {
	
	final static private String SIGNATURE = "UJI00";
	final static private int LOCKED_FLAG = 0;
	
	public byte[] block0;
	public byte[] block1;
	public byte[] block2;
	
	static public UJIRaw getInstance(byte[][] blocks) throws UJIDataException {
		if (blocks == null || blocks.length != 3) {
			throw new UJIDataException("Invalid blocks count");
		}
		return UJIRaw.getInstance(blocks[0], blocks[1], blocks[2]);
	}
	
	static public UJIRaw getInstance(byte[] block0, byte[] block1, byte[] block2) throws UJIDataException {
		UJIRaw testRaw = new UJIRaw(block0, block1, block2);
		
		// Se verifica la firma
		String signature = new String(testRaw.block0, 2, SIGNATURE.length());
		if (!signature.equals(SIGNATURE))
			throw new UJIDataException("Invalid SIGNATURE");
		
		// Verificamos el CRC
		checkCRC(testRaw.getCRC(), testRaw.calcCRC());
		
		return testRaw;
	}
	
	static public UJIRaw getInstance(UJIData testData) {
		byte[] block0 = new byte[16];
		byte[] block1 = new byte[16];
		byte[] block2 = new byte[16];
		
		System.arraycopy(cero, 0, block0, 0, cero.length);
		System.arraycopy(cero, 0, block1, 0, cero.length);
		System.arraycopy(cero, 0, block2, 0, cero.length);
		System.arraycopy(SIGNATURE.getBytes(), 0, block0, 2, SIGNATURE.length());
		UJIRaw testRaw = new UJIRaw(block0, block1, block2);
		testRaw.setData(testData);
		return testRaw;
	}
	
	private UJIRaw(byte[] block0, byte[] block1, byte[] block2) {
		this.block0 = block0;
		this.block1 = block1;
		this.block2 = block2;
	}
	
	public byte[] getCRC() {
		return new byte[] { block0[0], block0[1] };
	}
	
	public void setCRC(byte[] crc) {
		block0[0] = crc[0];
		block0[1] = crc[1];
	}
	
	public byte[] calcCRC() {
		int[] crc = {0xFF, 0xFF};
	    int nextByte = 0;
	    int uIndex; // Indexara en la table CRC

	    // Primer bloque
	    for (int i = 2; i < block0.length - 2; i++) {
	    	nextByte = 0xFF & ((int) block0[i]);
	    	uIndex = crc[0] ^ nextByte; //*puchMsg++; /* calculate the CRC */
	    	crc[0] = crc[1] ^ auchCRCHi[uIndex];
	    	crc[1] = auchCRCLo[uIndex];
	    }
	    // Segundo bloque
	    for (int i = 0; i < block1.length; i++) {
	    	nextByte = 0xFF & ((int) block1[i]);
	    	uIndex = crc[0] ^ nextByte; //*puchMsg++; /* calculate the CRC */
	    	crc[0] = crc[1] ^ auchCRCHi[uIndex];
	    	crc[1] = auchCRCLo[uIndex];
	    }
	    // Tercer bloque
	    for (int i = 0; i < block2.length; i++) {
	    	nextByte = 0xFF & ((int) block2[i]);
	    	uIndex = crc[0] ^ nextByte; //*puchMsg++; /* calculate the CRC */
	    	crc[0] = crc[1] ^ auchCRCHi[uIndex];
	    	crc[1] = auchCRCLo[uIndex];
	    }
	    return new byte[] { ((byte) (crc[0] & 0xFF)), ((byte) (crc[1] & 0xFF))};
	}
	
	public void setData(UJIData data) {
		setBoolean(block0, 7, LOCKED_FLAG, data.isErased());
		
		System.arraycopy(getBytes(data.getCardId()), 0, block1, 0, 8);
		System.arraycopy(getBytes(data.getUserId()), 0, block1, 8, 8);
		
		System.arraycopy(getBytes(data.getExpirationDate()), 0, block2, 0, 8);
		System.arraycopy(getBytes(data.getIssueDate()), 0, block2, 8, 8);
		
		setCRC(calcCRC());
	}
	
	public UJIData getData() {
		UJIData testData = new UJIData();
		
		testData.setCardId(getLong(block1, 0));
		testData.setUserId(getLong(block1, 8));
		
		testData.setExpirationDate(getLong(block2, 0));
		testData.setIssueDate(getLong(block2, 8));
		
		testData.setErased(getBoolean(block0, 7, LOCKED_FLAG));
		return testData;
	}
	
	static public void checkCRC(byte[] crc1, byte[] crc2) throws UJIDataException {
		if (crc1[0] != crc2[0] || crc1[1] != crc2[1])
			throw new UJIDataException("Invalid CRC");
	}
	
	static private byte[] getBytes(long l) {
		byte[] arr = new byte[8];
		arr[0] = (byte) (l >>> 56);
		arr[1] = (byte) (l >>> 48);
		arr[2] = (byte) (l >>> 40);
		arr[3] = (byte) (l >>> 32);
		arr[4] = (byte) (l >>> 24);
		arr[5] = (byte) (l >>> 16);
		arr[6] = (byte) (l >>>  8);
		arr[7] = (byte) (l >>>  0);
		return arr;
	}
	
	static private long getLong(byte[] b, int offset) {
        return (((long) b[0 + offset] << 56) +
                ((long)(b[1 + offset] & 255) << 48) +
		        ((long)(b[2 + offset] & 255) << 40) +
                ((long)(b[3 + offset] & 255) << 32) +
                ((long)(b[4 + offset] & 255) << 24) +
                ((b[5 + offset] & 255) << 16) +
                ((b[6 + offset] & 255) <<  8) +
                ((b[7 + offset] & 255) <<  0));
	}
	
	static private boolean getBoolean(byte[] b, int offset, int bit) {
		byte mask = (byte) ((byte) 0x1 << bit);
		return (b[offset] & mask) != 0 ? true : false;
	}
	
	static private void setBoolean(byte[] b, int offset, int bit, boolean value) {
		byte mask = (byte) ((byte) 0x1 << bit);
		if (value) {
			b[offset] |= mask;
		} else {
			b[offset] &= ~mask;
		}
	}
	
	// Ayuda para resetar los arrays.
	static private byte[] cero = new byte[] { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	
	// Table de valores CRC (byte alto).
	static private final short[] auchCRCHi = {
		0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
		0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
	    0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
	    0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
	    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
	    0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
	    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
	    0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
	    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
	    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
	    0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
	    0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
	    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
	    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
	    0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
	    0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
	    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
	    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
	    0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
	    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
	    0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
	    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
	    0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
	    0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
	    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
	    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40
	};

	// Table de valores CRC (byte bajo).
	static private final short[] auchCRCLo = {
	    0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06,
	    0x07, 0xC7, 0x05, 0xC5, 0xC4, 0x04, 0xCC, 0x0C, 0x0D, 0xCD,
	    0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,
	    0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A,
	    0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 0x1D, 0x1C, 0xDC, 0x14, 0xD4,
	    0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
	    0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3,
	    0xF2, 0x32, 0x36, 0xF6, 0xF7, 0x37, 0xF5, 0x35, 0x34, 0xF4,
	    0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,
	    0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29,
	    0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 0x2E, 0x2F, 0xEF, 0x2D, 0xED,
	    0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
	    0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60,
	    0x61, 0xA1, 0x63, 0xA3, 0xA2, 0x62, 0x66, 0xA6, 0xA7, 0x67,
	    0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F,
	    0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68,
	    0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA, 0xBE, 0x7E,
	    0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
	    0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71,
	    0x70, 0xB0, 0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92,
	    0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
	    0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B,
	    0x99, 0x59, 0x58, 0x98, 0x88, 0x48, 0x49, 0x89, 0x4B, 0x8B,
	    0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
	    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,
	    0x43, 0x83, 0x41, 0x81, 0x80, 0x40
	};
	
}
